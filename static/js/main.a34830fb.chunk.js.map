{"version":3,"sources":["components/CounterButton.js","components/Header.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","actions.js","api/api.js","constants.js","containers/App.js","serviceWorker.js","reducers.js","index.js"],"names":["CounterButton","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateCount","setState","state","count","nextProps","nextState","react_default","a","createElement","color","onClick","Component","Header","className","components_CounterButton","Card","_ref","name","email","id","alt","src","concat","CardList","robots","map","user","i","components_Card","key","SearchBox","searchField","searchChange","type","placeholder","aria-label","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundry","hasError","error","info","requestRobots","dispatch","url","fetch","then","response","json","data","payload","catch","App","onRequestRobots","_this$props","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","components_Header","components_SearchBox","components_Scroll","components_ErrorBoundry","components_CardList","connect","searchRobots","event","target","value","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a34830fb.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass CounterButton extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            count: 0\n        };\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        return this.state.count !== nextState.count;\n    }\n\n    updateCount = () => {\n        this.setState(state => {\n            return { count: state.count + 1 }\n        });\n    };\n\n    render() {\n        return (\n            <button color={this.props.color} onClick={this.updateCount}>\n                Count: {this.state.count}\n            </button>\n        );\n    }\n}\n\nexport default CounterButton;","import React, { Component } from 'react';\nimport CounterButton from './CounterButton';\n\nclass Header extends Component {\n    shouldComponentUpdate(nextProps, nextState) {\n        return false;\n    }\n\n    render() {\n        return (\n            <div>\n                <h1 className='f2'>Robofriends</h1>\n                <CounterButton color={'red'}/>\n            </div>\n        )\n    }\n}\n\nexport default Header;","import React from 'react';\nimport 'tachyons';\n\nconst Card = ({ name, email, id }) => {\n    return (\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n};\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n    return (\n        <div>\n            {\n                robots.map((user, i) => {\n                    return (\n                        <Card\n                            key={i}\n                            id={robots[i].id}\n                            name={robots[i].name}\n                            email={robots[i].email}\n                         />\n                    );\n                })\n            }\n        </div>\n    );\n};\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchField, searchChange }) => {\n    return (\n        <div className='pa2'>\n            <input\n                className='pa3 ba b--green bg-light-blue'\n                type='search'\n                placeholder='search robots'\n                aria-label='search robots'\n                onChange={searchChange}\n            />\n        </div>\n    );\n};\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n   return (\n       <div style={{overflowY: 'scroll', border: '3px solid black', height: '800px'}}>\n           {props.children}\n       </div>\n   );\n};\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    };\n\n    componentDidCatch(error, info) {\n        this.state({ hasError: true });\n    };\n\n    render() {\n        if (this.state.hasError) {\n            return <h1>Ooops, looks like there is an error.</h1>\n        }\n        return this.props.children;\n    };\n}\n\nexport default ErrorBoundry;","import { apiCall } from './api/api'\nimport {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants';\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n});\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({type: REQUEST_ROBOTS_PENDING});\n    apiCall('https://jsonplaceholder.typicode.com/users')\n        .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n        .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}));\n};","export const apiCall = (url) =>\n    fetch(url).then(response => response.json());","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Header from '../components/Header';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport './App.css';\nimport { setSearchField, requestRobots } from \"../actions\";\n\nconst mapStateToProps = state => {\n    return {\n        searchField: state.searchRobots.searchField,\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.isPending,\n        error: state.requestRobots.error\n    }\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n        onRequestRobots: () => dispatch(requestRobots())\n    }\n};\n\nclass App extends Component {\n    componentDidMount() {\n        this.props.onRequestRobots();\n    };\n\n    render () {\n        const { searchField, onSearchChange, robots, isPending } = this.props;\n        const filteredRobots = robots.filter(robot =>{\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\n        });\n        return isPending ?\n            <h1>Loading</h1> :\n            (\n                <div className='tc'>\n                    <Header />\n                    <SearchBox searchChange={onSearchChange}/>\n                    <Scroll>\n                        <ErrorBoundry>\n                            <CardList robots={filteredRobots}/>\n                        </ErrorBoundry>\n                    </Scroll>\n                </div>\n            );\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants';\n\nconst initialStateSearch =  {\n    searchField: ''\n};\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n    switch (action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({}, state, { searchField: action.payload });\n        default:\n            return state;\n    }\n};\n\nconst initialStateRobots =  {\n    isPending: false,\n    robots: [],\n    error: ''\n};\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n    switch (action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, { isPending: true });\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, { robots: action.payload, isPending: false });\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({}, state, { error: action.payload, isPending: false });\n        default:\n            return state;\n    }\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from \"./reducers\";\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(<Provider store={store}><App/></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();"],"sourceRoot":""}